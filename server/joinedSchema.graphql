type Query {
  airQuality(latitude: String!, longitude: String!): AirQuality!
  calendar: CalendarQueryType!
  singleDayWeather(latitude: String!, longitude: String!): SingleDayWeather!
  multiDayWeather(latitude: String!, longitude: String!, dayCount: Int): [MultiDayWeather!]!
}

type AirQuality {
  PM10: AirQualityData!
  PM25: AirQualityData!
}

type AirQualityData {
  pollutionType: String!
  data: AirQualityPollutionData!
}

type AirQualityPollutionData {
  value: Float!
  alertThreshold: String!
}

type Mutation {
  calendar: CalendarMutation!
  mainGate(toggle: Boolean!): Boolean!
  smallGate(toggle: Boolean!): Boolean!
}

type CalendarQueryType {
  events(userId: String!): [Event!]!
  authentication: CalendarAuthenticationQuery!
}

type EventTime {
  dateTime: String!
  timeZone: String!
}

type Event {
  name: String!
  start: EventTime!
}

type CalendarAuthenticationQuery {
  loginStatus(userId: String!): Boolean!
  loginUrl(userId: String!): String!
}

type CalendarMutation {
  authenticate(userId: String!, code: String!): Boolean!
}

type Subscription {
  mainGateStatus: MainGateStatusEvent!
  smallGateStatus: SmallGateStatusEvent!
  sensorListUpdates: [SensorListUpdate!]!
}

enum MainGateStatus {
  OPEN
  CLOSED
  PARTIALLY_OPEN
  UNKNOWN
}

type MainGateStatusEvent {
  status: MainGateStatus!
}

enum SmallGateStatus {
  OPEN
  CLOSED
  UNKNOWN
}

type SmallGateStatusEvent {
  status: SmallGateStatus!
}

type SensorListUpdate {
  name: String!
  value: Float!
}

type SingleDayWeather {
  temperature: SingleDayTemperature!
  weatherCode: Int!
}

type SingleDayTemperature {
  min: Float!
  max: Float!
}

type MultiDayWeather {
  temperature: Float!
  weatherCode: Int!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}